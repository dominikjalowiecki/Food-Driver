/**
 * Food Driver API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ActivateAccountRequest } from '../model/models';
import { ChangePasswordRequest } from '../model/models';
import { CreateMeRestaurantMenuItemRequest } from '../model/models';
import { GetMe200Response } from '../model/models';
import { GetMeRestaurant200Response } from '../model/models';
import { Info } from '../model/models';
import { ListMeOrders200Response } from '../model/models';
import { ListUsers200Response } from '../model/models';
import { OrderStatus } from '../model/models';
import { RefreshTokensRequest } from '../model/models';
import { ResetPasswordConfirmRequest } from '../model/models';
import { ResetPasswordRequest } from '../model/models';
import { SignInRequest } from '../model/models';
import { SignUpRequest } from '../model/models';
import { TokensPair } from '../model/models';
import { UpdateMeRequest } from '../model/models';
import { UpdateMeRestaurantRequest } from '../model/models';
import { UpdateUserRequest } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface UsersServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * 
     * Aktywacja konta użytkownika
     * @param activateAccountRequest 
     */
    activateAccount(activateAccountRequest?: ActivateAccountRequest, extraHttpRequestParams?: any): Observable<Info>;

    /**
     * 
     * Zmiana hasła do konta użytkownika
     * @param changePasswordRequest 
     */
    changePassword(changePasswordRequest?: ChangePasswordRequest, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * Utworzenie pozycji menu
     * @param createMeRestaurantMenuItemRequest 
     */
    createMeRestaurantMenuItem(createMeRestaurantMenuItemRequest?: CreateMeRestaurantMenuItemRequest, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * Usunięcie pozycji menu
     * @param id Unikalny identyfikator pozycji menu
     */
    deleteMeRestaurantMenuItem(id: number, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * Pobieranie danych zalogowanego użytkownika
     */
    getMe(extraHttpRequestParams?: any): Observable<GetMe200Response>;

    /**
     * 
     * Przegląd szczegółów restauracji zalogowanego użytkownika
     */
    getMeRestaurant(extraHttpRequestParams?: any): Observable<GetMeRestaurant200Response>;

    /**
     * 
     * Przegląd dostaw zalogowanego użytkownika
     * @param status Status zamówienia
     * @param reported Zgłoszono problem z zamówieniem
     * @param page Numer strony
     */
    listMeDeliveries(status?: OrderStatus, reported?: boolean, page?: number, extraHttpRequestParams?: any): Observable<ListMeOrders200Response>;

    /**
     * 
     * Przegląd zamówień zalogowanego użytkownika
     * @param status Status zamówienia
     * @param reported Zgłoszono problem z zamówieniem
     * @param page Numer strony
     */
    listMeOrders(status?: OrderStatus, reported?: boolean, page?: number, extraHttpRequestParams?: any): Observable<ListMeOrders200Response>;

    /**
     * 
     * Przegląd zamówień restauracji
     * @param status Status zamówienia
     * @param reported Zgłoszono problem z zamówieniem
     * @param page Numer strony
     */
    listMeRestaurantOrders(status?: OrderStatus, reported?: boolean, page?: number, extraHttpRequestParams?: any): Observable<ListMeOrders200Response>;

    /**
     * 
     * Przegląd użytkowników systemu
     * @param search Wyszukaj użytkownika
     * @param page Numer strony
     */
    listUsers(search?: string, page?: number, extraHttpRequestParams?: any): Observable<ListUsers200Response>;

    /**
     * 
     * Odświeżanie tokenów autentykacji i odświeżania
     * @param refreshTokensRequest 
     */
    refreshTokens(refreshTokensRequest?: RefreshTokensRequest, extraHttpRequestParams?: any): Observable<TokensPair>;

    /**
     * 
     * Reset hasła użytkownika
     * @param resetPasswordRequest 
     */
    resetPassword(resetPasswordRequest?: ResetPasswordRequest, extraHttpRequestParams?: any): Observable<Info>;

    /**
     * 
     * Potwierdzenie resetu hasła użytkownika
     * @param resetPasswordConfirmRequest 
     */
    resetPasswordConfirm(resetPasswordConfirmRequest?: ResetPasswordConfirmRequest, extraHttpRequestParams?: any): Observable<Info>;

    /**
     * 
     * Logowanie na konto użytkownika
     * @param signInRequest 
     */
    signIn(signInRequest?: SignInRequest, extraHttpRequestParams?: any): Observable<TokensPair>;

    /**
     * 
     * Utworzenie konta użytkownika
     * @param signUpRequest 
     */
    signUp(signUpRequest?: SignUpRequest, extraHttpRequestParams?: any): Observable<Info>;

    /**
     * 
     * Dodanie subskrypcji powiadomień Push
     * @param body 
     */
    subscribePushNotifications(body?: object, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * Edycja danych zalogowanego użytkownika
     * @param updateMeRequest 
     */
    updateMe(updateMeRequest?: UpdateMeRequest, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * Edycja danych restauracji zalogowanego użytkownika
     * @param updateMeRestaurantRequest 
     */
    updateMeRestaurant(updateMeRestaurantRequest?: UpdateMeRestaurantRequest, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * Edycja pozycji menu
     * @param id Unikalny identyfikator pozycji menu
     * @param createMeRestaurantMenuItemRequest 
     */
    updateMeRestaurantMenuItem(id: number, createMeRestaurantMenuItemRequest?: CreateMeRestaurantMenuItemRequest, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * 
     * Edycja użytkownika systemu
     * @param id Unikalny identyfikator użytkownika
     * @param updateUserRequest 
     */
    updateUser(id: number, updateUserRequest?: UpdateUserRequest, extraHttpRequestParams?: any): Observable<{}>;

}
